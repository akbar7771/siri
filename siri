<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>PROJECT SENTINEL-X</title>
<style>
  @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@500&display=swap');
  body {
    margin: 0;
    background: black;
    color: #00ff00;
    font-family: 'Orbitron', monospace, monospace;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
  }
  #glitch {
    font-size: 1.5rem;
    letter-spacing: 2px;
    text-align: center;
    user-select: none;
    white-space: pre-wrap;
  }
  #countdown {
    font-size: 3rem;
    margin-top: 40px;
    color: #ff0000;
  }
  #final {
    font-size: 2rem;
    margin-top: 30px;
    color: #ff4500;
    display: none;
  }
  .glitch-effect {
    animation: glitch 0.3s infinite;
  }
  @keyframes glitch {
    0% {
      text-shadow:
        1px 0 red,
        -1px 0 cyan;
    }
    50% {
      text-shadow:
        -1px 0 red,
        1px 0 cyan;
    }
    100% {
      text-shadow:
        1px 0 red,
        -1px 0 cyan;
    }
  }
</style>
</head>
<body>
<div id="glitch">Initializing Sentinel-X protocol...</div>
<div id="countdown"></div>
<div id="final"></div>

<audio id="voice" src="https://actions.google.com/sounds/v1/alarms/air_raid_siren.ogg" preload="auto"></audio>

<script>
  const glitchTextEl = document.getElementById('glitch');
  const countdownEl = document.getElementById('countdown');
  const finalEl = document.getElementById('final');
  const voice = document.getElementById('voice');

  const name = "Alisher Sharifbaev";
  const location = "Uzbekistan";

  const messages = [
    "This is Sentinel-X. Android breach detected.",
    `Subject identified: ${name}.`,
    `Location: ${location}. Device compromised.`,
    "Front camera active. Facial scan in progressâ€¦"
  ];

  // Function to simulate typing text one letter at a time
  function typeMessage(element, message, delay = 50) {
    return new Promise((resolve) => {
      let i = 0;
      element.textContent = "";
      const interval = setInterval(() => {
        element.textContent += message.charAt(i);
        i++;
        if (i === message.length) {
          clearInterval(interval);
          resolve();
        }
      }, delay);
    });
  }

  // Function to create glitch effect for short time
  function glitchEffect(duration = 3000) {
    glitchTextEl.classList.add('glitch-effect');
    setTimeout(() => {
      glitchTextEl.classList.remove('glitch-effect');
    }, duration);
  }

  // Play military siren sound
  function playSiren() {
    voice.volume = 0.3;
    voice.play();
  }

  async function runPrank() {
    // Step 1: Typing initial message
    await typeMessage(glitchTextEl, "Initializing Sentinel-X protocol...", 60);
    await new Promise(r => setTimeout(r, 1000));
    playSiren();

    // Step 2: Show each message with glitch effect and typing
    for (const msg of messages) {
      glitchEffect(2000);
      await new Promise(r => setTimeout(r, 500));
      await typeMessage(glitchTextEl, msg, 40);
      await new Promise(r => setTimeout(r, 1500));
    }

    // Step 3: Countdown with flashing glitch text
    let count = 10;
    countdownEl.textContent = `System lockdown in: ${count}`;
    glitchEffect(1000);

    const countdownInterval = setInterval(() => {
      count--;
      countdownEl.textContent = `System lockdown in: ${count}`;
      glitchEffect(500);
      if (count <= 0) {
        clearInterval(countdownInterval);
        countdownEl.textContent = "";
        glitchTextEl.textContent = "";
        finalEl.style.display = "block";
        finalEl.textContent = "Sentinel-X Simulation complete. You failed the containment test.";
        playSiren();
      }
    }, 1000);
  }

  // Vibrate the phone if supported
  if (navigator.vibrate) {
    navigator.vibrate([200, 100, 200, 100, 400]);
  }

  runPrank();
</script>
</body>
</html>

